4/19(金)
デフォルト引数
…関数定義時に引数に値を指定することで、デフォルト引数を指定した引数は関数の呼び出した際に引数を指定しなくてもよくなる。

視錐台…カメラの見える範囲

・視錐台のNearクリップとFarクリップの間の空間にあるオブジェクトしか表示されない。

・3D空間における最少単位は「頂点」、頂点3つを結んで1つの「ポリゴン」ができる


4/24(水)
行列とは４×３のfloat変数の集まりであり、「大きさ・回転・位置の全ての情報を１つにまとめたもの」
・ワールド行列…3D空間で座標や拡大率、角度を決める重要な行列

単位行列…世界の中心(0,0)に拡大率1.0で表示する初期化に使われる行列
「Math::Matrix::Identity」と記述して行列に代入できる

DigreeとRadianの違いを意識する

行列合成の順番
    World      =   S(Scale)   * R(Rotation)  * T(Translation)
ワールド行列　＝　拡大行列　×　回転行列　×　座標行列


4/26(金)
回転行列の扱いにおいて、X・Y・Z軸のどの回転なのかをまずははっきりと理解する。

トラッキングカメラ（写す対象を追跡するカメラ）


5/15(水)
「KdCameraクラス」の「SetProjectionMatrix」関数の引数「maxRange」と「minRange」がfarクリップとnearクリップの場所を決める。

・カメラの行列では拡大率は必要なく、上記の引数で描画の距離が変わるため行列合成時になくてもいい。

・ベクトル（方向ベクトル）…力の向きと力の大きさ

・「Normalize」関数…どのような値が入っていようが、約「１」の値にしてくれる関数。

・行列の親子関係…
キャラにカメラがついていくなどの場合、カメラの行列合成の最後にキャラのワールド行列を掛けることでキャラの行列を親行列としてカメラがキャラについていくようになる。


5/17(金)
・ポリモーフィズム…
基底クラスのリストに同じ基底クラスからの派生クラスのポインタを格納することができる。
※リストに格納された派生クラスのポインタで呼び出せる関数は基底クラスで仮想クラスにして、派生クラスでオーバーライドする必要がある。


5/24(金)
KdGameObjectクラスを継承した基底クラスを作って派生クラスに派生させることで、親子関係を作り出し、ポインタを用いて他の派生クラスの値にアクセスすることができる。

・派生元の基底クラスがKdGameObjectクラスを継承している場合、派生先のクラスはKdGameObjectクラスのリストに追加することができる。

・行列の更新時に、元の行列に「＊＝」で合成すると、保持した値に加算されていく。


5/29(水)
・継承を細分化して分ける。
・お互いのクラスがお互いのクラスのポインタを所持していた場合、循環参照が起きる。
循環参照…お互いがポインタを所持するので、参照カウンタが０にならずに残り続けるため、意図的に破棄しない限り残り続けてしまう。
・ファイル階層は工夫する。


6/5(水)
・2Dスプライトの描画座標の計算は、もとからあるカメラでの計算を行わないと表示されない。
・KdCameraクラスの関数を呼び出すことができるようになってから座標の変換を行う。

・3D空間内のものをクリックする時の座標変換
2D座標を3D座標へ変換する時に、
・まずは、nearクリップ上での座標に変換される。
↓
・次に、カメラの中心座標からnearクリップ上での座標に向けてレイを飛ばす。
↓
・レイを伸ばしていき、その先になんかがあれば、それをクリックしたという判定になる。


6/19(水)
・マウスの移動した分だけFPS視点でカメラを回転させる場合、以下の手順が必要になる。
①マウスの現在の座標を取得する
↓
②画面中央からの差分を算出する
↓
③カーソルを画面中央へ戻す
↓
④差分を利用して回転角度を設定する
※マウス上での移動方向と、カメラの回転角度の軸はｘとｙで逆なので間違えないようにする。

・Matrix型の「CreateFromYawPitchRoll」の引数は、「Yaw(Y軸)」、「Pitch(X軸)」、「Roll(Z軸)」の順番で戻り値を返すこと。

・Vector3型の「TransformNormal」は、与えられたVector3型を第二引数の回転行列に基づいて変換してくれる。


6/21(金)
・TPS視点のカメラを作る場合は、行列の合成はS・T・Rの順で行う

・「GetMatrix().Backward()」で自身の正面方向のベクトルを取得することができる。
※環境によっては関数名が違うことがある。現在のライブラリでは自身の正面は「Backward()」で取得できる。


7/3(水)
・TPSカメラで、対象からカメラまでの距離はレイの発射方向を求めた際にでた値を「Normalize」する前の値を利用することができる。
・当たり判定をした座標をそのままカメラの座標として渡していしまうと、当たった地面の座標と同じ位置にカメラが移動してしまうので、移動先の座標を少しずらしてから移動させる必要がある。
ずらす方法
①Y座標を直接上げる。
※地形が平坦な場合はこれでも安定する。
②カメラから対象へのレイの発射方向に当たった座標に追加で少し移動させる。
※地形が凸凹でも対応できる。


7/5(金)
・DirectXライブラリにある「XMMatrixLookAtLH」関数を使うと、「カメラ（第一引数）を対象（第二引数）から見た角度」を計算していくれる。
※今回使いたい値が「カメラから見た対象への角度」なので、Matrixに搭載された「Invert」関数で値を逆転させる。


7/22(月)
・KdModelDataは地形などの動かないものを表示するものに使用したりする。
・モデルに変更がある場合などは、KdModelWorkを使う。

「スキンメッシュ」とは…
	頂点が変形するメッシュ。